// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FeedbackReview.Models;

public partial class CustomerFeedbackDBContext : DbContext
{
    public CustomerFeedbackDBContext(DbContextOptions<CustomerFeedbackDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);
        //add connection string here
        optionsBuilder.UseSqlServer("Server=.;Database=CustomerFeedback;Trusted_Connection=True;TrustServerCertificate=True;");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.Property(e => e.FeedbackId).HasColumnName("FeedbackID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.FeedbackText)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedbacks_Customers");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);


   // Trigger handle
	public override int SaveChanges()
	{
		DisableTrigger();
		var result = base.SaveChanges();
		EnableTrigger();
		return result;
	}

	public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
	{
		DisableTrigger();
		var result = base.SaveChangesAsync(cancellationToken);
		EnableTrigger();
		return result;
	}

	private void DisableTrigger()
	{
		Database.ExecuteSqlRaw("DISABLE TRIGGER trg_FeedbackStatus ON Feedbacks");
	}

	private void EnableTrigger()
	{
		Database.ExecuteSqlRaw("ENABLE TRIGGER trg_FeedbackStatus ON Feedbacks");
	}
}